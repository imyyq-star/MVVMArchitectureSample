apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs.kotlin"

android {
    compileSdkVersion SysConfig.compileSdkVersion
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.imyyq.sample"
        minSdkVersion SysConfig.minSdkVersion
        targetSdkVersion SysConfig.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                // 如果用到 room，可指定 room.schemaLocation 属性，指定生成的包含 sql 的 json 文件路径
                arguments += ["room.schemaLocation": "$projectDir/build/schemas".toString()]
                // 增量编译
                arguments += ["room.incremental": "true"]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        beta {
            initWith release
        }

        debug {
            ext.enableCrashlytics = false
            ext.alwaysUpdateBuildId = false
        }
    }

    dexOptions {
        preDexLibraries true
        maxProcessCount 8
        jumboMode = true
    }

    // 开启 DataBinding 和 ViewBinding
    buildFeatures{
        dataBinding = true
        viewBinding = true
    }

    // 支持 Java 8
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "${JavaVersion.VERSION_1_8}"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // 以下是框架没有封装过的库，只是将具体的地址放到了 MVVMArchitecture/dependencies.gradle 文件中，需要的话，自行引入
    implementation Deps.natigationFragmentKTX

    implementation Deps.bindingAdapter
    implementation Deps.bindingAdapterKTX
    implementation Deps.bindingAdapterRv
    implementation Deps.bindingAdapterVp2

    // 源码方式引用框架
    implementation project(path: ':MVVMArchitecture')
    // 如果你用到 room，需要声明注解处理器，否则无法使用的。
    kapt Deps.roomCompiler

//    implementation 'com.github.imyyq-star:MVVMArch:1.0.4'
//    // TODO 如果是远程仓库的形式，则要按需自行引入以下相应的库，比如你用到了 Room，就得 implementation room...
//
//    // 内存泄露 LeakCanary
//    debugImplementation Deps.leakCanary2
//
//    implementation Deps.lifecycleProcess
//    implementation Deps.recyclerView
//
//    // room 数据库
//    implementation Deps.roomRuntime
//    implementation Deps.roomRxJava2
//    kapt Deps.roomCompiler
//
//    // rx
//    implementation Deps.rxAndroid2
//    implementation Deps.rxJava2
//
//    // 网络请求
//    implementation Deps.retrofit2
//    implementation Deps.retrofit2RxJava2
//    // JSON 解析
//    implementation Deps.gson
//    implementation Deps.gsonConverter
//
//    // glide 图片加载
//    implementation Deps.glide
//    kapt Deps.glideCompiler
//
//    // 权限申请
//    implementation Deps.livePermissions
//    // 内嵌加载中框架
//    implementation Deps.loadSir

}
